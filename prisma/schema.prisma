generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  FREELANCER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum InteractionType {
  CALL
  EMAIL
  MEET
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  profilePhoto String?
  password     String
  phoneNumber  String
  role         UserRole   @default(FREELANCER)
  status       UserStatus @default(ACTIVE)
  isDeleted    Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Client      Client[]
  Project     Project[]
  Interaction Interaction[]
  Reminder    Reminder[]

  @@map("users")
}

model Client {
  id          String  @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  company     String?
  notes       String?
  ownerId     String
  user        User    @relation(fields: [ownerId], references: [id])
  isDeleted   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects    Project[]
  Interaction Interaction[]
  Reminder    Reminder[]

  @@map("clients")
}

model Project {
  id        String        @id @default(uuid())
  title     String
  budget    Float
  deadline  DateTime
  status    ProjectStatus @default(NOT_STARTED)
  clientId  String
  client    Client        @relation(fields: [clientId], references: [id])
  ownerId   String
  owner     User          @relation(fields: [ownerId], references: [id])
  isDeleted Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Interaction Interaction[]
  Reminder    Reminder[]

  @@map("projects")
}

model Interaction {
  id        String          @id @default(uuid())
  date      DateTime
  type      InteractionType
  notes     String
  projectId String
  project   Project         @relation(fields: [projectId], references: [id])
  clientId  String
  client    Client          @relation(fields: [clientId], references: [id])
  ownerId   String?
  owner     User?           @relation(fields: [ownerId], references: [id])
  isDeleted Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interactions")
}

model Reminder {
  id        String   @id @default(uuid())
  date      DateTime
  message   String
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  ownerId   String?
  owner     User?    @relation(fields: [ownerId], references: [id])

  @@map("reminders")
}
